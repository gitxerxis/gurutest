Task 1:
Please create a free account and public Git repository on GitHub for this test.
The solution for each question should be committed to different branches.
You are encouraged to make incremental commits, rather than commit everything once the solutions are finished.
You should also write down your assumptions.
Bonus: create unit tests to verify your solutions.

1. Write a script that accepts a positive integer range and, for each increment in the range, prints:
   - "Fizz" if a multiple of 3
   - "Buzz" if a multiple of 5
   - The integer itself otherwise.
   
   E.g. for f[12..16], the output is "Fizz 13 14 FizzBuzz 16".

2. Do the same as question 1, except in addition to the previous rules, now it prints "Bazz" instead of an integer after consecutive Fizzes/Buzzes.

  E.g. for f[4..11], the output is “4 Buzz Fizz Bazz 8 Fizz Buzz Bazz”.


Task 2:

Assumptions:
1. The webserver has been configured correctly to direct the URL specify below to getinfo.php.
2. The Mysql Server has been configured and running.

Please raise at least 10 suggestions/corrections about these codes.

test.html:

<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<HTML xmlns:fb="http://www.facebook.com/2008/fbml">
<HEAD>
<SCRIPT SRC="http://code.jquery.com/jquery-1.7.2.js"></SCRIPT>

</HEAD>
<BODY>
<DIV ID="fb-root"></DIV>
<H1><FONT FACE="verdana" COLOR="green">Welcome</FONT></H1>
<CENTER><DIV CLASS="InfoDiv"></DIV></CENTER>
<script type="text/javascript">
$(function() { //do it on DOM Ready (1)
	<!--//
	Get the data using ajax
	//-->
	$.getJSON("/getinfo/111", {}, function(data) { $('.InfoDiv').html(data); }); // Suggest to user $.getJSON instead (5)
});
</script>
</BODY>
</HTML>

getinfo.php:

<?php
require_once("data.php");

$ArrayURL = split('/', $_SERVER['REQUEST_URI'] );  //Fix syntax error (2)
$id = $ArrayURL[1];
$data = new baseObj(); //Fix Invalid  Class Name (3)

if (is_object($data) === true) $status = '200 OK'; // Fix conditional operator (4 )
$status_header = 'HTTP/1.1 $status';

header($status_header);
return json_encode( $data->getAll($id) );

?>

data.php:

<?php

class baseObj {
    public $mysql = null;
    private  $table = null;

    public function __construct ()
    {
        $this->mysql = new mysqli("localhost", "user", "password", "database");
        if ($this->mysql->connect_errno) {
            echo "Failed to connect to MySQL: (" . $this->mysql->connect_errno . ") " . $this->mysql->connect_error;
        }
    }

    public function get ($id, $field)
    {
		$table = $this->table;
        return $this->mysql->query("SELECT $field FROM $table WHERE ID = $id");
    }

    public function getAll ($id)
    {
		$table = $this->table;
        $res = $this->mysql->query("SELECT * FROM $table WHERE ID = $id");
        return $res->fetch_assoc();
    }
	
	//handy table setter
	public function setTable( $tableName ) {
		$this->table = $tableName;
	}
	
}

class propertyData extends baseObj {
    public $id = null;
    public $type = null;
    public $title = null;
    public $address = null;
    public $bedroom = null;
    public $livingroom = null;
    public $diningroom = null;
    protected $hdbblock = null;
    private $swimmingPool = null;

	//Handy table setter
	public function setTable( $tableName ) { parent::$table = $tableName; }
	
    public function getType ($ID) { $this->setTable( 'Property' ); $this->type = $this->get( $ID, 'Type'); return $this->type; }
    public function getTitle ($ID) { $this->setTable( 'Property' );  $this->title = $this->get( $ID, 'Title') ; return $this->title;}
    public function getAddress ($ID) { $this->setTable( 'Property' );  $this->address = $this->get( $ID, 'Address') ; return $this->address;}
    public function getBedroom ($ID) {  $this->setTable( 'Property' );  $this->bedroom = $this->get( $ID, 'Bedroom') ; return $this->bedroom;}
    public function getLivingroom ($ID) {  $this->setTable( 'Property' );  $this->livingroom = $this->get( $ID, 'Living_room') ; return $this->livingroom;}
    public function getDiningroom ($ID) { $this->setTable( 'Property' );  $this->diningroom = $this->get( $ID, 'Diningroom') ; return $this->diningroom;}
	
	//Added
	public function getHdbBlock ($ID) { $this->setTable( 'HDB' );  $this->hdbblock = $this->get( $ID, 'HDBBlock') ; return $this->hdbblock; }
	public function getSwimmingPool ($ID) { $this->setTable( 'Condo' );  $this->swimmingPool = $this->get( $ID, 'SwimmingPool') ; return $this->swimmingPool;}	
	


	
}

class hdbData extends propertyData {
    public function getHDBBlock ($ID) {  
		return $this->getHdbBlock( $ID );
	}
}

class condoData extends propertyData {
    public function gotSwimmingPool ($ID)
    {
        return $this->getSwimmingPool($ID);
    }
}

?>

data.sql:

DROP TABLE IF EXISTS Property; /* Suggest to have this to make your script re-usable, for such cases as reset (9)  */
CREATE TABLE Property (
    ID BIGINT AUTO_INCREMENT PRIMARY KEY,
    Type TINYINT default 1,
    Title CHAR(255) default '',
    Address TEXT NOT NULL,
    Bedroom INT default 0,
    Living_room INT default 0,
    Diningroom INT default 0,
    Size Decimal(6,2) default 0.0
) ENGINE=InnoDB; /* Change this to InnoDB, to FIX (err: 150 )   (6)  */ 

DROP TABLE IF EXISTS HDB;
CREATE TABLE HDB (
    ID BIGINT AUTO_INCREMENT PRIMARY KEY,
    PID BIGINT NOT NULL,
    HDBBlock INT NOT NULL,
    INDEX idx_PID (PID), 
    FOREIGN KEY (PID) REFERENCES Property(ID)
) ENGINE=InnoDB;


DROP TABLE IF EXISTS Condo;
CREATE TABLE Condo (
    ID BIGINT AUTO_INCREMENT NOT NULL PRIMARY KEY,  /* An auto column must be a key  (8) */
    PID BIGINT NOT NULL, /* PID must be of same type as PK  (7) */
    SwimmingPool TINYINT default 0,
    INDEX idx_PID (PID), 
    FOREIGN KEY (PID) REFERENCES Property(ID)
) ENGINE=InnoDB;
